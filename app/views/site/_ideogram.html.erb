<script>

  function getGenomicRange(annot) {
    var chr, start, stop, startString, stopString, genomicRange;

    // Get genomic range
    chr = annot.chr;
    start = annot.start;
    stop = start + annot.length;
    startString = start.toLocaleString();
    stopString = stop.toLocaleString();
    genomicRange = 'chr' + chr + ':' + startString + '-' + stopString;

    return genomicRange;
  }

  function getEnsemblLink(annot) {
    var url, link;
    url = 'https://www.ensembl.org/' + annot.id;
    link = '<a target="_blank" href="' + url + '">' + annot.name + '</a>';
    return link;
  }

  function writeAnnotsTable() {

    var chr, annots, datum, row, header, table, annotsContainer, keys,
        genomicRange, ensemblLink, key, i, j, k, displayKeys;

    rows = [];

    annotsContainer = ideogram.annots;

    keys = ideogram.rawAnnots.keys;

    for (i = 0; i < annotsContainer.length; i++) {
      chr = annotsContainer[i].chr;
      annots = annotsContainer[i].annots;
      for (j = 0; j < annots.length; j++) {
        annot = annots[j];
        row = [];

        genomicRange = getGenomicRange(annot);
        ensemblLink = getEnsemblLink(annot);

        for (k = 0; k < keys.length; k++) {
          key = keys[k];
          if (key === 'name') {
            datum = ensemblLink;
          } else if (key === 'start') {
            datum = genomicRange;
          } else if (key === 'id') {
            continue;
          } else {
            datum = annot[key];
          }
          row.push(datum)

        }
        row = '<tr><td>' + row.join('</td><td>') + '</td></tr>';
        rows.push(row);
      }
    }

    displayKeys = [];
    for (i = 0; i < keys.length; i++) {
      key = keys[i];
      if (key == 'start') {
        key = 'Genomic range';
      } else if (key === 'id') {
        continue;
      } else {
        key = key[0].toUpperCase() + key.slice(1);
      }
      displayKeys.push(key)
    }

    header = '<tr><th>' + displayKeys.join('</th><th>') + '</th></tr>';

    table =
      '<table class="table table-striped table-sm">' +
        '<thead>' + header + '</thead>' +
        '<tbody>' + rows + '</tbody>' +
      '</table>';

    $('#ideogram-container').append(table);
  }

  var annotHeight = 3.5;
  var ideoAnnotShape =
    'm0,0 l 0 ' + (2 * annotHeight) +
    'l ' + annotHeight/2 + ' 0' +
    'l 0 -' + (2 * annotHeight) + 'z';

  var annotationTracks = [
    {id: 'all', shape: ideoAnnotShape},
    {id: 'cluster1', shape: ideoAnnotShape},
    {id: 'cluster2',  shape: ideoAnnotShape}
  ];

  var accessToken = '<%= user_signed_in? ? current_user.valid_access_token[:access_token] : nil %>';
  var annotationsPath = '<%= raw @study.get_analysis_outputs('infercnv', 'ideogram.js').first.api_url %>';

  // Intercept requests to add bearer token, enabling direct load of files from GCS
  var constantMock = window.fetch;
  window.fetch = function () {
    var myHeaders = new Headers({
      'Authorization': 'Bearer ' + accessToken
    });
    arguments[1] = {headers: myHeaders};
    return constantMock.apply(this, arguments)
  };

  var ideogram = new Ideogram({
    container: '#ideogram-container',
    organism: 'human',
    assembly: 'GRCh38',
    chrHeight: 400,
    dataDir: 'https://unpkg.com/ideogram@1.1.1/dist/data/bands/native/',
    annotationsPath: annotationsPath,
    annotationTracks: annotationTracks,
    showAnnotTooltip: false, // too many genes, and tooltip positioning issues; hide for now
    heatmaps: [
      {
        key: 'all',
        thresholds: [['-0.001', '#551ABB'], ['0', '#CCC'], ['+', '#FFA500']]
      },
      {
        key: 'Cluster 1',
        thresholds: [['-0.001', '#551ABB'], ['0', '#CCC'], ['+', '#FFA500']]
      },
      {
        key: 'Cluster 2',
        thresholds: [['-0.001', '#551ABB'], ['0', '#CCC'], ['+', '#FFA500']]
      }
    ],
    debug: true
  });


</script>