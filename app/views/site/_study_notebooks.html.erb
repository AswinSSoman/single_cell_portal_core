<%= render "create_cluster.html.erb"%>
<div class="row">
  <div class="col-md-1"></div>
  <div class="col-md-10">
    <div class="panel panel-default">
      <div class="panel-heading">
        <div class="panel-title">
          <a data-toggle="collapse" href="#collapseNotebook" role="button" aria-expanded="true" aria-controls="collapseNotebook">
            <span class="fa-caret-right fa fa-fw"></span>Notebook
          </a>
        </div>
      </div>
      <div class="collapse in" id="collapseNotebook">
        <div class="card card-body">
          <div class="row">
            <div class="col-sm-1"></div>
            <iframe id="notebook-iframe" class="col-sm-10">
            </iframe>
            <div class="col-sm-1"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-1"></div>
</div>
<div class="row">
  <div class="col-md-1"></div>
  <div class="col-md-10">
    <div class="panel panel-default">
      <div class="panel-heading">
        <div class="panel-title">
          <a data-toggle="collapse" href="#collapseMachines" role="button" aria-expanded="true" aria-controls="collapseMachines">
            <span class="fa-caret-right fa fa-fw"></span>Machines
          </a>
        </div>
      </div>
      <div class="collapse in" id="collapseMachines">
        <div class="card card-body">
          <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-10">
              <div>
                <h2 id="spark-clusters-title">Spark Clusters</h2>
              </div>
              <table id="spark-clusters-table" class="table table-striped table-condensed">
                <div class="row form-group">
                  <div class="col-xs-7">
                    <span>
                      Launch an interactive analysis environment based on Jupyter notebooks, Spark, and Hail. This beta feature is under active development. See documentation <a href="https://software.broadinstitute.org/firecloud/documentation/quickstart?page=notebooks" target="_blank">here<span class="fa-external-link fa "></span></a>
                    </span>
                  </div>
                  <div class="col-xs-3">
                  </div>
                  <div class="col-xs-2">
                    <a id="create-modal-button" state="enabled" class="pull-right button btn btn-md btn-primary" href="javascript:;" data-toggle="modal" data-target="#clusterModal"><span>Create Cluster</span></a>
                  </div>
                </div>
                <div class="row" id="no_clusters_well">
                  <div class="col-lg-12">
                    <div id="message-well" class="well">
                      <h4 class="text-center">There are no clusters to display.</h4>
                    </div>
                  </div>
                </div>
              </table>
            </div>
            <div class="col-sm-1"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-1"></div>
</div>


<script type="text/javascript" nonce="<%= content_security_policy_script_nonce %>">
    <%= render partial: 'notebooks_api_functions.js.erb'%>
</script>

<script type="text/javascript" nonce="<%= content_security_policy_script_nonce %>">
    // only want to do all this work when we know the user is logged in
    // TODO change to correct firecloud permission
    <% if user_signed_in? %>
        // api call params
        var workspace = "<%= @study.firecloud_project %>";
        var access_token = "Bearer <%= current_user.access_token['access_token']%>";
        // api header setup
        var headers = {
            "Authorization": access_token
        };
        // create the data table object
        var table = $('#spark-clusters-table').DataTable({
            data: generateDataTable(workspace, headers),
            columns: [{
                title: "Status"
            },
                {
                    title: "Create Date"
                },
                {
                    title: "master Machine Type"
                },
                {
                    title: "Master Disk Size (GB)"
                },
                {
                    title: "Name"
                },
                {
                    title: "Workers"
                },
                {
                    title: "Worker Machine Type"
                },
                {
                    title: "Worker Disk Size (GB)"
                },
                {
                    title: "Worker Local SSDs"
                },
                {
                    title: "Preemptible Workers"
                },
                {
                    title: "Creator Email"
                }
            ],
            autoWidth: false,
            paging: true,
            buttons: [{
                extend: 'columnsToggle',
                className: 'btn btn-large btn-primary'
            }, {
                extend: 'filter',
                className: 'excelButton'
            }]
        });
        // function to reset all listeners for buttons and links and attach new ones
        function clearAndAttachListeners() {
            // Detach delete cluster listeners and reattach new ones
            $(".cluster-delete").off();
            $(".cluster-delete").click(function () {
                var clusterName = this.id;
                var deleteRequest = deleteCluster(workspace, clusterName, headers);
                console.log(deleteRequest);
                refreshTable()
            });

            // Detach start cluster listeners and reattach new ones
            $(".cluster-start").off();
            $(".cluster-start").click(function () {
                var clusterName = this.id;
                var stopRequest = startCluster(workspace, clusterName, headers);
                console.log(stopRequest);
                refreshTable()
            });

            // Detach stop cluster listeners and reattach new ones
            $(".cluster-stop").off();
            $(".cluster-stop").click(function () {
                var clusterName = this.id;
                var startRequest = stopCluster(workspace, clusterName, headers);
                console.log(startRequest);
                refreshTable()
            });

            // Detach notebook link listeners and reattach new ones
            $(".notebook-link").off();
            $(".notebook-link").click(function (event) {
                event.preventDefault();
                var clusterName = this.id;

                $.cookie('LeoToken', "<%= current_user.access_token['access_token']%>", {
                    path: '/'
                });
                var setCookieRequest = setCookie(workspace, clusterName, headers);
                var notebookRequest = getNotebook(workspace, clusterName, headers);
                notebookRequest.onload = function (e) {
                    if (notebookRequest.readyState === 4) {
                        if (notebookRequest.status === 200) {
                            var iframe = $('#notebook-iframe');
                            var notebookHtml = notebookRequest.responseText;
                            var filtered = notebookHtml.split("\n").map(function(line){
                                if(line.indexOf("img") !== -1){
                                    return "<img src='/assets/jupyter_logo.png' alt='Jupyter' />"
                                }
                                return line
                            });
                            filtered = filtered.join("\n");

                            iframe.contents().empty().find('body').append($.parseHTML(filtered));

                        } else {
                            console.error(notebookRequest.statusText);
                        }
                    }
                };
                notebookRequest.onerror = function (e) {
                    console.error(xhr.statusText);
                };
                notebookRequest.send(null);

                refreshTable()
            });

            // Detach start cluster listeners and reattach new ones
            $(".cluster-localize").off();
            $(".cluster-localize").click(function () {
                var clusterName = this.id;
                var bucket = "gs://<%= @study.bucket_id %>/*";
                var body = {".":bucket};
                var localizeRequest = localizeFiles(workspace, clusterName, headers, body);
                console.log(localizeRequest);
                refreshTable()
            });

        }

        // redraw the table and reset listeners
        function refreshTable() {
            table.clear();
            table.rows.add(generateDataTable(workspace, headers));
            table.draw();
            clearAndAttachListeners()
        }
        // on initial page load we want listeners to be set
        clearAndAttachListeners();
        // 20 second timer for table refresh
        window.setInterval(refreshTable, 60000);
        // TODO potentially use this when signing out?
        function invalidateToken() {
            var invalidateCookieRequest = invalidateCookie(headers);
        }
    <% end %>
</script>
